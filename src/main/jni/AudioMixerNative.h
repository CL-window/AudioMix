/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_kaolafm_record_AudioMixerNative */

#ifndef _Included_com_kaolafm_record_AudioMixerNative
#define _Included_com_kaolafm_record_AudioMixerNative

#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_kaolafm_record_AudioMixerNative
 * Method:    PcmMixEncoderInit
 * Signature: ()I
 */
JNIEXPORT jint Java_com_cl_slack_mixaudio_AudioMixerNative_PcmMixEncoderInit
  (JNIEnv *, jobject);

JNIEXPORT jint Java_com_cl_slack_mixaudio_AudioMixerNative_PcmMixEncoderInitWithParams
        (JNIEnv *, jobject, jint, jint);

/*
 * Class:     com_kaolafm_record_AudioMixerNative
 * Method:    PcmMixEncoderDeInit
 * Signature: ()V
 */
JNIEXPORT void Java_com_cl_slack_mixaudio_AudioMixerNative_PcmMixEncoderDeInit
  (JNIEnv *, jobject);

/*
 * Class:     com_kaolafm_record_AudioMixerNative
 * Method:    MusicPcmMixEncode
 * Signature: (II[BI)[B
 */
JNIEXPORT jbyteArray Java_com_cl_slack_mixaudio_AudioMixerNative_MusicPcmMixEncode
  (JNIEnv *, jobject, jint, jint, jbyteArray, jint);

/*
 * Class:     com_kaolafm_record_AudioMixerNative
 * Method:    MicPcmMixEncode
 * Signature: (II[BI)[B
 */
JNIEXPORT jbyteArray Java_com_cl_slack_mixaudio_AudioMixerNative_MicPcmMixEncode
  (JNIEnv *, jobject, jint, jint, jbyteArray, jint);

/*
 * Class:     com_kaolafm_record_AudioMixerNative
 * Method:    MusicPcmEncode
 * Signature: (II[BI)[B
 */
JNIEXPORT jbyteArray Java_com_cl_slack_mixaudio_AudioMixerNative_MusicPcmEncode
  (JNIEnv *, jobject, jint, jint, jbyteArray, jint);

/*
 * Class:     com_kaolafm_record_AudioMixerNative
 * Method:    MicPcmEncode
 * Signature: (II[BI)[B
 */
JNIEXPORT jbyteArray Java_com_cl_slack_mixaudio_AudioMixerNative_MicPcmEncode
  (JNIEnv *, jobject, jint, jint, jbyteArray, jint);

/*
 * Class:     com_kaolafm_record_AudioMixerNative
 * Method:    PcmMixFlush
 * Signature: ()[B
 */
JNIEXPORT jbyteArray Java_com_cl_slack_mixaudio_AudioMixerNative_PcmMixFlush
  (JNIEnv *, jobject);

/*
 * Class:     com_kaolafm_record_AudioMixerNative
 * Method:    MusicGain
 * Signature: (F)V
 */
JNIEXPORT void Java_com_cl_slack_mixaudio_AudioMixerNative_MusicGain
  (JNIEnv *, jobject, jfloat);

/*
 * Class:     com_kaolafm_record_AudioMixerNative
 * Method:    MicGain
 * Signature: (F)V
 */
JNIEXPORT void Java_com_cl_slack_mixaudio_AudioMixerNative_MicGain
  (JNIEnv *, jobject, jfloat);

/*
 * Class:     com_kaolafm_record_AudioMixerNative
 * Method:    audioFileCut
 * Signature: (Ljava/lang/String;Ljava/lang/String;FFF)I
 */
JNIEXPORT jint Java_com_cl_slack_mixaudio_AudioMixerNative_audioFileCut
  (JNIEnv *, jobject, jstring, jstring, jfloat, jfloat, jfloat);

JNIEXPORT void JNICALL
Java_com_cl_slack_mixaudio_AudioMixerNative_addMusicPcmQueue(JNIEnv *env, jobject instance,
                                                             jint iSampleRate, jint iChannelNumber,
                                                             jbyteArray pData_);

JNIEXPORT void JNICALL
Java_com_cl_slack_mixaudio_AudioMixerNative_addMicPcmQueue(JNIEnv *env, jobject instance,
                                                           jint iSampleRate, jint iChannelNumber,
                                                           jbyteArray pData_);

JNIEXPORT jbyteArray JNICALL
Java_com_cl_slack_mixaudio_AudioMixerNative_mixTwoPcmFlush(JNIEnv *env, jobject instance,
                                                           jint iSampleRate1, jint iChannelNumber1,
                                                           jbyteArray pData1_, jint iSampleRate2,
                                                           jint iChannelNumber2,
                                                           jbyteArray pData2_);

JNIEXPORT void JNICALL
Java_com_cl_slack_mixaudio_AudioMixerNative_clearQueue(JNIEnv *env, jobject instance);


#ifdef __cplusplus
}
#endif
#endif
